{"version":3,"sources":["GetTasteCall.js","GetTasteInfo.js","ToScreen.js","Intro.js","GetBookInfo.js","App.js","serviceWorker.js","index.js"],"names":["GetTasteCall","props","axios","url","responseType","method","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","k","q","verbose","xmlToJSON","GetTasteInfo","format","ToScreen","className","genres","map","data","index","aboutTube","yUrl","hidden","key","src","extraInfo","strArtistThumb","alt","Name","Type","href","target","rel","trigger","position","strBiographyEN","wTeaser","Intro","GetBookInfo","App","handleSubmit","event","preventDefault","state","userInput","then","res","setState","tastes","Similar","Results","bookInfo","artists","remove","filter","obj","artistInfo","alert","handleUserInput","value","onClickEvent","myDivToFocus","current","scrollIntoView","behavior","block","handleOnSubmit","setTimeout","React","createRef","action","onSubmit","this","type","onChange","onClick","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.004aee89.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport Qs from \"qs\"\r\n\r\nconst GetTasteCall = (props) => {\r\n    return axios({\r\n        url: 'https://proxy.hackeryou.com',\r\n        responseType: 'json',\r\n        method: \"GET\",\r\n        paramsSerializer: function (params) {\r\n            return Qs.stringify(params, { arrayFormat: 'brackets' })\r\n        },\r\n        params: {\r\n            reqUrl: 'https://tastedive.com/api/similar',\r\n            params: {\r\n                k: \"366898-NA-YOHJFJWV\",\r\n                q: props,\r\n                verbose: 1,\r\n            },\r\n            xmlToJSON: false\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default GetTasteCall","import axios from \"axios\";\r\n\r\nconst GetTasteInfo = (props) => {\r\n    const url = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${props}`;\r\n\r\n    return axios({\r\n        method: 'GET',\r\n        url: url,\r\n        params: {\r\n            format: 'json',\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default GetTasteInfo","import React from \"react\";\r\nimport Popup from \"reactjs-popup\"\r\n\r\nconst ToScreen = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">            \r\n            <ul>\r\n            {\r\n            props.genres.map( (data, index) => {\r\n                // if statement to check for wording. If no wording, pull data from another api.\r\n                const aboutInfo = () => {\r\n                    if (data.extraInfo) {\r\n                        if (data.extraInfo[0].strBiographyEN === \"\") {\r\n                            return data.wTeaser\r\n                        } else {\r\n                            return data.extraInfo[0].strBiographyEN\r\n                        }\r\n                    } else {\r\n                        return data.wTeaser\r\n                    }\r\n                }\r\n                // if statement to add youtube link if there is a string.\r\n                const aboutTube = () => {\r\n                    if (data) {\r\n                        if (data.yUrl === null) {\r\n                            return hidden()\r\n                        } else {\r\n                            return data.yUrl\r\n                        }\r\n                    }\r\n                }\r\n                // used to add class name to hide youtube link if no info is there.\r\n                const hidden = () => {\r\n                    return \"hidden\"\r\n                }\r\n                return (\r\n                    <li className=\"relative\" key={index}>\r\n                            <div className=\"background\">\r\n                            <img src={\r\n                            data.extraInfo \r\n                            ? data.extraInfo[0].strArtistThumb\r\n                            : \"loading\"} \r\n                            alt={data.Name}/></div>\r\n                            <div className=\"absolute\">\r\n                                <h2>{data.Name}</h2>\r\n                                <p>Genre: {data.Type}</p>\r\n                                <a href={aboutTube()} target=\"_blank\" className={aboutTube()} rel=\"noopener noreferrer\">YouTube</a>\r\n                                <Popup trigger={<button>About</button>} position=\"center center\">\r\n                                    <div className=\"about\">{\r\n                                        aboutInfo()\r\n                                    }</div>\r\n                                </Popup>\r\n                            </div>\r\n                    </li>\r\n                )\r\n            })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToScreen;\r\n","import React from \"react\";\r\n\r\nconst Intro = () => {\r\n    return (\r\n    <section>\r\n        <div className=\"introInner\">\r\n        <h1>Welcome to the Taste Finder!</h1>\r\n        <h2>This app works by taking genres you like (i.e artists, movies, books, etc) and will generate a list of similar genres to help you find more things to enjoy!</h2>\r\n        <h2>Try me!</h2>\r\n        <p>For example: AC/DC</p>\r\n        </div>\r\n    </section>\r\n    )\r\n}\r\n\r\nexport default Intro;","import axios from \"axios\";\r\nimport Qs from \"qs\"\r\n\r\nconst GetBookInfo = (props) => {\r\n    // The below returns XML as a result couldn't work with the data in time to populate more book info properly\r\n    return axios({\r\n        url: 'https://proxy.hackeryou.com',\r\n        responseType: 'jsonp',\r\n        method: \"GET\",\r\n        paramsSerializer: function (params) {\r\n            return Qs.stringify(params, { arrayFormat: 'brackets' })\r\n        },\r\n        params: {\r\n            reqUrl: \"https://www.goodreads.com/search/index.xml\",\r\n            params: {\r\n                key: \"kIJlbpC9jOud3psLARUQQ\",\r\n                q: props,\r\n            },\r\n            xmlToJSON: false\r\n        }\r\n    })\r\n}\r\n\r\nexport default GetBookInfo;","import React, { Component } from 'react';\nimport GetTasteCall from \"./GetTasteCall.js\";\nimport GetTasteInfo from \"./GetTasteInfo.js\";\nimport ToScreen from \"./ToScreen.js\";\nimport Intro from \"./Intro.js\";\n\n// import Popup from \"reactjs-popup\"\n// import axios from \"axios\";\n// import Qs from \"qs\"\nimport './App.css';\nimport GetBookInfo from './GetBookInfo.js';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      tastes: [],\n      artistInfo: [],\n      bookInfo: [],\n      userInput: \"\",\n    }\n    this.myDivToFocus = React.createRef()\n  }\n\n  \n\n  handleSubmit = (event) => {\n    //prevent page refresh on form submit\n    event.preventDefault()\n    // checking for if userInput is empty, if it's not, proceed with axios call else prompt user to try again\n    if (this.state.userInput !== \"\") {\n      //query api here to have it run when empty string is not used then empty string afterwards. Used promised in order to use data here in App, set the axios call to tastes\n      // by comma seperating the setState the code will run in order.\n      GetTasteCall(this.state.userInput).then((res) => {\n        this.setState({\n          tastes: res.data.Similar.Results,\n          bookInfo: res.data.Similar.Results\n        }, () => {\n\n          \n          const artistName = [...this.state.tastes]\n          artistName.map((map) => {\n\n            if (map.Type === \"music\") {\n              GetTasteInfo(map.Name).then( (res) => {\n  \n                // we want append artist info into each artists object\n                // extraInfo is being added to the 'map' info using dot notation\n                map.extraInfo = res.data.artists\n                // using if statement to check for null data and to filter it out so it doesn't cause display issues.\n                let remove = this.state.tastes;\n                if (res.data.artists === null) {\n  \n                  remove = this.state.tastes.filter((obj) => {\n                    return obj.Name !== map.Name;\n  \n                  });\n                }\n                this.setState({\n                  artistInfo: res.data.artists,\n                  // set tastes to remove once null has been removed\n                  tastes: remove\n                }, () => {\n                  // emptying userInput so it doesn't remain in search box after call\n                  this.setState({\n                    userInput: \"\"\n                  })\n                }\n                )\n              }\n              )\n            } else if (map.Type === \"book\") {\n\n              GetBookInfo(map.Name).then( (res) => {\n                // Below data is for converting xml to json for api. Not a great solution as the browser doesn't read it properly. Need to come back to this to learn more on XML.\n                // const convert = require('xml-js');\n                // const result1 = convert.xml2json(res.data, { compact: true, spaces: 4 });\n                // // const result2 = convert.xml2json(res.data, { compact: false, spaces: 4 });\n                // console.log(result1._cdata);\n\n                map.bookInfo = res.data;\n\n                this.setState({\n                  userInput: \"\"\n                })\n              })\n            } else if (map.Type === \"movie\") {\n\n              this.setState({\n                userInput: \"\"\n              })\n            }\n          })\n        })\n      })\n    } else {\n      alert(\"Please input a choice\");\n    }\n    \n  }\n\n  // Take the value of what the user is typing and set it to the userInput state.\n  handleUserInput = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  onClickEvent = (event) => {\n    //.current is verification that your element has rendered\n    if (this.myDivToFocus.current) {\n      this.myDivToFocus.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\"\n      })\n    }\n  }\n\n  // Need to run 2 functions on form submit. so I put them into their own function so I can call both\n  handleOnSubmit = (event) => {\n    this.handleSubmit(event)\n    setTimeout( () => {\n      this.onClickEvent();\n    }, 1000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"start\">\n          <div className=\"wrapper\">\n            <Intro />\n            <form action=\"\" onSubmit={this.handleOnSubmit}>\n              <input type=\"text\" value={this.state.userInput} onChange={this.handleUserInput}/>\n              <button type=\"submit\" onClick={this.onClickEvent}>Search</button>\n            </form>\n            <p className=\"note\">Do note, the app will generate a list for all searches, however detailed info only works on music so far</p>\n          </div>\n        </section>\n        <section className=\"list\" ref={this.myDivToFocus}>\n          <ToScreen genres={this.state.tastes}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}